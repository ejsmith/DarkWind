@page "/"
@using System.Text.Json
@using DarkWind.Client.Hubs
@using DarkWind.Shared
@using System.Text.Json.Nodes
@using XtermBlazor
@inject TelnetHub Hub
@inject IJSRuntime _js

<PageTitle>DarkWind Web Client</PageTitle>

<Xterm
    @ref="_terminal"
    Options="_options"
    OnFirstRender="@OnFirstRender"
/>

<div>HP: @health / @maxHealth</div>

<form @onsubmit="SendCommand" class="m-1">
    <div class="input-group mb-3 w-100">
        <input id="input" @bind="_input" type="text" class="form-control" placeholder="Send command" aria-label="Send command" aria-describedby="button-addon2" autocomplete="off" style="box-shadow:none;">
        <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Send</button>
    </div>
</form>

<Xterm @ref="_gmcp" Options="_gmcpOptions" />

@code {
    private Xterm? _terminal;
    private Xterm? _gmcp;
    private string _input = String.Empty;
    int health = 0;
    int maxHealth = 0;
    private CancellationTokenSource cts = new CancellationTokenSource();


    private TerminalOptions _options = new TerminalOptions
    {
        Rows = 30,
        CursorStyle = CursorStyle.Bar
    };

    private TerminalOptions _gmcpOptions = new TerminalOptions
    {
        Rows = 10,
        CursorStyle = CursorStyle.Bar
    };

    private async Task OnFirstRender()
    {
        await Hub.Start();

        var channel = await Hub.Connect(cts.Token);

        await _js.InvokeVoidAsync("selectText", "input");

        while (await channel.WaitToReadAsync())
        {
            while (channel.TryRead(out var data))
            {
                if (data.Option == TelnetMessage.KnownOptions.Echo) 
                {
                    await _terminal!.Write(data.Message);    
                }
                else if (data.Option == TelnetMessage.KnownOptions.GMCP) 
                {
                    if (String.IsNullOrEmpty(data.Message)) continue;

                    await _gmcp!.WriteLine(data.Message);

                    var firstSpace  = data.Message.IndexOf(' ');
                    var name        = firstSpace > 0 ? data.Message.Substring(0, firstSpace) : data.Message;
                    var payload     = firstSpace > 0 && data.Message.Length > firstSpace ? data.Message.Substring(firstSpace) : String.Empty;

                    try
                    {
                        var gmcpData = JsonDocument.Parse(payload);
                        if (name == "Char.Vitals") 
                        {
                            var vitals  = JsonNode.Parse(payload);
                            health      = vitals!["hp"]?.GetValue<int>() ?? 0;
                            maxHealth   = vitals!["maxhp"]?.GetValue<int>() ?? 0;

                            StateHasChanged();
                        }
                    } 
                    catch (Exception ex) 
                    {
                        await _gmcp!.WriteLine("ERR: " + ex.Message);
                    }
                }
            }
        }
    }

    private async Task SendCommand()
    {
        if (String.IsNullOrEmpty(_input)) return;

        await Hub.Send(_input + '\r');
        await _terminal!.Write(_input + "\r\n");
        await _js.InvokeVoidAsync("selectText", "input");
    }

    private async Task SendGmcpCommand(string command)
    {
        if (String.IsNullOrEmpty(command)) return;

        await Hub.SendGmcp(command);
    }
}

